import sympy as sp
import numpy as np
import matplotlib.pyplot as plt

fx_input = input("Masukkan fungsi f(x) (contoh: x**3 - x - 2): ")
a = float(input("Masukkan batas bawah a: "))
b = float(input("Masukkan batas atas b: "))
toleransi = float(input("Masukkan toleransi error (contoh: 0.0001): "))
maks_iterasi = int(input("Masukkan jumlah maksimum iterasi: "))

x = sp.symbols('x')
f_sym = sp.sympify(fx_input)
f_lambd = sp.lambdify(x, f_sym, modules=['numpy'])

def regula_falsi(f, a, b, tol, max_iter):
    print("\nIterasi\ta\t\tb\t\tc\t\tf(c)\t\tError")
    prev_c = None
    for i in range(1, max_iter+1):
        fa = f(a)
        fb = f(b)
        c = b - (fb * (b - a)) / (fb - fa)
        fc = f(c)
        error = abs(fc)
        if prev_c is not None:
            error = abs(c - prev_c)
        print(f"{i}\t{a:.6f}\t{b:.6f}\t{c:.6f}\t{fc:.6f}\t{error:.6f}")
        if abs(fc) < tol:
            break
        if fa * fc < 0:
            b = c
        else:
            a = c
        prev_c = c
    return c

akar = regula_falsi(f_lambd, a, b, toleransi, maks_iterasi)
print(f"\nAkar pendekatan: {akar:.6f}")

x_vals = np.linspace(a-1, b+1, 400)
y_vals = f_lambd(x_vals)

plt.figure(figsize=(8,6))
plt.axhline(0, color='gray', linewidth=0.5)
plt.plot(x_vals, y_vals, label=f"f(x) = {fx_input}", color='blue')
plt.scatter([akar], [f_lambd(akar)], color='red', label=f"Akar ~ {akar:.6f}")
plt.title("Metode Regula Falsi")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.legend()
plt.grid(True)
plt.show()
